#+TITLE: Spring Data tutor

* step by step
使用 spring data jpa，只需要下面几步:

** 引入 Spring data 的 jar 包
在 build.gradle 里面，增加 jpa 的 starter
: compile('org.springframework.boot:spring-boot-starter-data-jpa')

** 实现我们自己的接口
#+BEGIN_SRC java
  public interface MyRepository extends JpaRepository<Book, Long> {
      
  }
#+END_SRC

** 实现我们的自定义方法
#+BEGIN_SRC java
    public interface MyRepository extends JpaRepository<Book, Long> {

        /* 第 1 种方式，人工智能 */
        
        public List<Book> findBookByPrice(Float price);
        @Nullable List<Person> findByEmailAddressAndLastname(EmailAddress emailAddress, String lastname);
        List<Person> findByLastnameAndFirstnameAllIgnoreCase(String lastname, String firstname);
        List<Person> findByLastnameOrderByFirstnameAsc(String lastname);
        List<Person> findByLastnameOrderByFirstnameDesc(String lastname);


        /* 第 2 种方式，NameQuery - 手动设置查询语句 */
        
        @Query("select * from Book where name = ?1")
        public List<Book> findBookByName(String name);
        
        @Query("select u from User u where u.emailAddress = :email")
        User findByEmailAddress(@Param("email") String emailAddress);

        @Query(value = "SELECT * FROM USERS WHERE EMAIL_ADDRESS = ?1", nativeQuery = true)
        User findByEmailAddress(String emailAddress);

        @Query(value = "SELECT * FROM USERS WHERE LASTNAME = ?1",
               countQuery = "SELECT count(*) FROM USERS WHERE LASTNAME = ?1",
               nativeQuery = true)
        Page<User> findByLastname(String lastname, Pageable pageable);


        /* 第 3 种，修改数据 */
        @Modifying @Query("update User u set u.firstname = ?1 where u.lastname = ?2")
        int setFixedFirstnameFor(String firstname, String lastname);

        @Modifying @Query("delete from User u where user.role.id = ?1")
        void deleteInBulkByRoleId(long roleId);
        

        /* 另外，可以设置分页、排序参数*/

        List<User> findByLastname(String lastname, Sort sort);
        List<User> findByLastname(String lastname, Pageable pageable);
        repo.findByLastname("stark", new Sort("LENGTH(firstname)"));   
    }
#+END_SRC

** 调用
#+BEGIN_SRC java
  @Controller
  public class BookController {
      @Autowired
      private MyRepository myRepository;
      
      @RequestMapping("/index")
      public String index() {
          List<Book> books = myRepository.findBookByName("战争与和平");
          return ...;
      }
  }
#+END_SRC
* More
*Interfaces:*
- Repository
- CrudRepository
- JpaRepository

*Methods:*
- NamedQuery
- Method Created

*PageAndSort:*
- Pagable
- Sort

* 人工智能关键词示例
| 关键词            | 示例                                 | JPQL 语句                                                       |
|-------------------+--------------------------------------+-----------------------------------------------------------------|
| And               | findByLastnameAndFirstname           | … where x.lastname = ?1 and x.firstname = ?2                   |
| Or                | findByLastnameOrFirstname            | … where x.lastname = ?1 or x.firstname = ?2                    |
| Is,Equals         | findByFirstname[Is/Equals]           | … where x.firstname = ?1                                       |
| Between           | findByStartDateBetween               | … where x.startDate between ?1 and ?2                          |
| LessThan          | findByAgeLessThan                    | … where x.age < ?1                                             |
| LessThanEqual     | findByAgeLessThanEqual               | … where x.age <= ?1                                            |
| GreaterThan       | findByAgeGreaterThan                 | … where x.age > ?1                                             |
| GreaterThanEqual  | findByAgeGreaterThanEqual            | … where x.age >= ?1                                            |
| After             | findByStartDateAfter                 | … where x.startDate > ?1                                       |
| Before            | findByStartDateBefore                | … where x.startDate < ?1                                       |
| IsNull            | findByAgeIsNull                      | … where x.age is null                                          |
| IsNotNull,NotNull | findByAge(Is)NotNull                 | … where x.age not null                                         |
| Like              | findByFirstnameLike                  | … where x.firstname like ?1                                    |
| NotLike           | findByFirstnameNotLike               | … where x.firstname not like ?1                                |
| StartingWith      | findByFirstnameStartingWith          | … where x.firstname like ?1 (parameter bound with appended %)  |
| EndingWith        | findByFirstnameEndingWith            | … where x.firstname like ?1 (parameter bound with prepended %) |
| Containing        | findByFirstnameContaining            | … where x.firstname like ?1 (parameter bound wrapped in %)     |
| OrderBy           | findByAgeOrderByLastnameDesc         | … where x.age = ?1 order by x.lastname desc                    |
| Not               | findByLastnameNot                    | … where x.lastname <> ?1                                       |
| In                | findByAgeIn(Collection<Age> ages)    | … where x.age in ?1                                            |
| NotIn             | findByAgeNotIn(Collection<Age> ages) | … where x.age not in ?1                                        |
| True              | findByActiveTrue()                   | … where x.active = true                                        |
| False             | findByActiveFalse()                  | … where x.active = false                                       |
| IgnoreCase        | findByFirstnameIgnoreCase            | … where UPPER(x.firstame) = UPPER(?1)                          |
